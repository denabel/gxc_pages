---
title: "Performance"
---

<details><summary>Packages used in this section</summary>
```{r packages, warning = FALSE, message = FALSE}
library(gxc)
library(sf)
library(dplyr)
library(ggplot2)
library(stringr)
library(tidyr)
library(plotly)
library(rnaturalearth)
library(bench)
library(future)
```
</details>

## How long will linking take on an average laptop?

Depending on the size and extent of your data, running `gxc` linking functions can take a very long time. After all, we are dealing with continuous data on a national to global level! Generally, there are two steps that take up the majority of the time: 1. Data downloads and 2. raster extraction. In this section, we diagnose performance and we also explore options with the potential to improve performance.

When thinking about performance in spatio-temporal applications, there are four key characteristics of a dataset that affect the computational complexity:

1. **Sample size**: 10 or 100,000 people?
2. **Spatial extent**: City, national, continental, or worldwide?
3. **Observation period**: Averages for month, season, or year?
4. **Baseline period**: No baseline, 10y baseline, or 30y baseline?

To exemplify, we will create an example grid with varying sample sizes (10 to 5,000) and observation periods (0 days, 2 days, 11 days). You can expand the collapsed code below to see how we created the data.

<details><summary>Code to create example data</summary>
```{r create-grid2, warning=FALSE}
# Retrieve geometries
germany <- ne_countries(
  country = "Germany",
  scale = "medium",
  returnclass = "sf"
)

europe <- ne_countries(
  continent = "Europe",
  scale = "medium",
  returnclass = "sf"
) |>
  st_intersection(st_as_sfc(st_bbox(c(
    xmin = -10.0,
    ymin = 35.0,
    xmax = 40.0,
    ymax = 71.0
  ), crs = st_crs(4326))))

# Generate grids
grid_ger <- st_bbox(germany) |>
  st_as_sfc() |>
  st_make_grid(n = c(100, 100)) |>
  st_sf(geometry = _)

grid_eu <- st_bbox(europe) |>
  st_as_sfc() |>
  st_make_grid(n = c(100, 100)) |>
  st_sf(geometry = _)

get_corners <- function(grid) {
  bbox <- st_bbox(grid)
  corners <- st_sfc(
    st_point(bbox[c("xmin", "ymin")]),
    st_point(bbox[c("xmax", "ymin")]),
    st_point(bbox[c("xmin", "ymax")]),
    st_point(bbox[c("xmax", "ymax")]),
    crs = st_crs(grid)
  )
  corners <- st_within(corners, grid)
  attributes(corners) <- NULL
  names(corners) <- c("ll", "lr", "ul", "ur")
  unlist(corners)
}

# Sample-function (always including the four corner cells).
sample_grid <- function(n, grid) {
  if (n < 4) stop("n must be at least 4 to include all corner cells.")

  # Calculate n-corner polygons
  corners <- get_corners(grid)
  n_random <- n - length(corners)

  # Exclude the corner cells from the random sample
  remaining <- grid[-corners, ]

  # Randomly sample from the remaining cells
  random_sample <- remaining[sample(nrow(remaining), n_random), ]

  # Combine the corner cells with the random sample
  rbind(grid[corners, ], random_sample)
}

# Sample grids with various n
sample_sizes <- c(10, 20, 50, 100, 200, 500, 1000, 2000, 5000)

# Loop over the sample sizes
samples_ger <- lapply(sample_sizes, sample_grid, grid_ger)
samples_eu <- lapply(sample_sizes, sample_grid, grid_eu)
samples <- c(samples_ger, samples_eu)
names(samples) <- sprintf("%s_sample_%s", rep(c("ger", "eu"), each = length(sample_sizes)), sample_sizes)
```
</details>

The data consists of 18 lists containing vector cells with a varying sample size:

```{r}
str(samples, max.level = 1, give.attr = FALSE)
```

```{r grid-plot2}
plot_samples <- bind_rows(samples[startsWith(names(samples), "ger")], .id = "sample")
ggplot(plot_samples) +
  geom_sf(fill = "#c994c7", color = "#dd1c77", size = 0.3) +
  geom_sf(data = germany, fill = NA, color = "#2c7fb8", size = 0.8) +
  facet_wrap(~sample, ncol = 3, dir = "v", labeller = function(value) {
      as.data.frame(paste("Sample =", gsub("ger_sample_", "", value$sample)))
  }) +
  theme_void()
```

To analyse performance, we will run the following R code repeatedly. The curly braces indicate the function arguments that vary between function calls. Each of these calls is benchmarked 10 times to ensure the consistency of timings.

``` r
link_monthly(
  .data = {data with varying sample sizes},
  indicator = "2m_temperature",
  time_span = {varying time spans}
)
```

We use the `2m_temperature` indicator from the [`ERA5-Land` monthly averages](https://doi.org/10.24381/cds.68d2bb30) for this exercise. The code was run on an average office laptop (Intel Core i7-10510U CPU, 16GB RAM, Windows 10). The benchmarking is powered by the [bench](https://bench.r-lib.org/) package.

```{r execute-time2, eval=FALSE}
# Add arbitrary time identifier to grid
samples <- lapply(samples, function(grid) {
  grid$date <- "2020-12-01"
  grid
})

# Pre-cache (to keep timings consistent)
invisible({
  link_monthly(samples[[1]], indicator = "2m_temperature", time_span = 0)
  link_monthly(samples[[1]], indicator = "2m_temperature", time_span = 2)
  link_monthly(samples[[1]], indicator = "2m_temperature", time_span = 11)
  link_monthly(samples[[10]], indicator = "2m_temperature", time_span = 0)
  link_monthly(samples[[10]], indicator = "2m_temperature", time_span = 2)
  link_monthly(samples[[10]], indicator = "2m_temperature", time_span = 11)
})

time_spans <- c(0, 2, 11)

# Benchmark
bm <- bench::press(
  extent = c("ger", "eu"),
  sample_size = sample_sizes,
  time_span = time_spans,
  bench::mark(
    link_monthly(
      .data = samples[[sprintf("%s_sample_%s", extent, sample_size)]],
      indicator = "2m_temperature",
      time_span = time_span,
      verbose = FALSE
    ),
    iterations = 10
  )
)
```

```{r, echo=FALSE}
(bm <- readRDS("data/bm_seq.rds"))
```


<details><summary>Code for the interactive plot</summary>
```{r time-plot2}
bm$time_span <- sapply(
  as.character(bm$time_span),
  switch,
  `0` = "month",
  `2` = "seasonal",
  `11` = "yearly"
)

plots <- lapply(c("ger", "eu"), function(extent) {
  data <- bm |>
    filter(extent %in% !!extent) |>
    select(sample_size, median, time_span, time) |>
    mutate(
      min = sapply(time, min),
      max = sapply(time, max)
    ) |>
    unnest_longer(time)

  p <- ggplot(data, aes(x = sample_size, color = time_span, group = time_span)) +
    geom_point(aes(y = unclass(time))) +
    geom_line(aes(y = unclass(median))) +
    geom_ribbon(aes(ymin = min, ymax = max), alpha = 0.2, color = NA) +
    labs(
        title = "Execution time vs. sample size",
        x = "Sample size",
        y = "Execution time (in s)",
        color = "Observation period"
    ) +
    scale_color_manual(values = c(
        "month" = "#dd1c77",
        "seasonal" = "#225ea8",
        "yearly" = "#7fcdbb"
    )) +
    theme_minimal()

  ggplotly(p) |>
    style(p, visible = identical(extent, "ger"))
}) |>
  setNames(c("ger", "eu"))

vis_eu <- c(rep(FALSE, 7), rep(TRUE, 7))
vis_ger <- c(rep(TRUE, 7), rep(FALSE, 7))

menus <- list(
  list(
    type = "dropdown",
    active = 0,
    x = 0,
    y = 1.12,
    xanchor = "left",
    yanchor = "top",
    buttons = list(
      list(label = "Germany", method = "restyle", args = list("visible", vis_ger)),
      list(label = "Europe", method = "restyle", args = list("visible", vis_eu))
    )
  )
)

annot <- list(
  x = 0,
  y = 1.19,
  xref = "paper", yref = "paper",
  text = "Spatial extent",
  showarrow = FALSE,
  font = list(size = 14)
)

p <- plotly_build(plots$ger)
p$x$data <- c(plots$ger$x$data, plots$eu$x$data)
p |>
  layout(updatemenus = menus, annotations = annot, margin = list(t = 150)) |>
  style(hovertemplate = "<i>Time</i>: %{y} s") |>
  config(displaylogo = FALSE, modeBarButtonsToRemove = c(
    "zoomIn2d", "zoomOut2d", "toImage", "hoverCompareCartesian",
    "hoverClosestCartesian", "resetScale2d", "autoScale2d", "lasso2d",
    "select2d", "pan2d", "zoom2d"
  ))
``` 
 </details>


## How does gxc work? 

![The cookie analogy (AI generated image)](https://pplx-res.cloudinary.com/image/upload/v1748864705/gpt4o_images/q7zcgzm7ve3d2mlg2toy.png){width="50%"}

### Parallel processing 

When activating parallel processing tasks are divided into equally sized chunks and directed to multiple CPU cores. Imagine you are baking cookies, in a sequential mode you would use one tray in one oven at a time. Moving to parallel-sequential, here you would use 10 ovens for baking your cookies but only with one tray in each oven. However, in parallel-processing you would use 10 ovens and and multiple trays in each oven at the same time. Thus, when working with so many ovens and trays maybe cookies will burn and you would have to walk between all the different ovens, that is what is called **overhead**. 
Overhead is the extra time, resources and effort needed to manage a task, apart from the task itself. In parallel-processing managing multiple threads, sending data to each chunk, retrieve results and synchronizing requires time and memory i.e. overhead. It is the cost of making things faster [(R Core Team 2025)](https://stat.ethz.ch/R-manual/R-devel/library/parallel/doc/parallel.pdf). 

The time to run e.g. `poly_link()` function depends on the number of grid cells i.e. sample size and the time of interest (TOI). The nested loop first iterates through each sampled grid (e.g. different amount of polygons) and then through different TOI. 
The `tictoc` package can record the time for this process. 
For smaller chunks parallel processing creates more overhead and is less efficient. Larger chunks reduce the overhead and perform generally better. 
For the `gxc`-package parallel-processing shows the best performance especially for larger sample sizes.

## Increasing processing speed

What can you do when your operations are running slow? 
The performance of gxc operations is closely tied to the characteristics of your input data and the indicators you select. Working with large datasets—especially those typical in Earth Observation (EO), such as baseline temperature downloads or high sample sizes—naturally increases processing time. This also applies to wide spatial extents and longer focal or time-of-interest periods.

In general, both the quality and quantity of your data influence how efficiently the package performs. Be mindful of your system’s cache and critically assess which input data are essential for your research goals. Striking the right balance between data volume, processing time, and result quality is key to optimizing performance. 
Later, we will discuss the advantages of parallel processing to enhance the packages performance.



You can use the `parallel`-package in base R (function like `lapply()`, `sapply()` or `apply()`) for parallel computing. In the case they run slow you can apply interfaces to other languages like complied code in Rcpp. A code profiler like the `profvis`-package can help you find the _bottleneck_ of your code i.e. where the slow code lies. Moreover, your code structure and order affect performance and speed. 
So start:

- Sorting and ordering with algorithms like `c(“shell”, “quick”, “radix”)`

- Converting data frames to (sparse) matrices

- Using specialized row and column functions e.g. `apply()`-functions from the `matrixStats`-package

- Defining a memory directory

- Avoiding copies

- Vectorizing your code (works faster than loops)

- Choosing the right data type (integers and factors work faster than characters),

- Using bytecode compilation

- Caching results 

- Employing `data.table` or `dplyr`-functions 

[(Gillespie & Lovelace 2021)](https://csgillespie.github.io/efficientR/performance.html#performance-parallel)
</details>

### `futureverse`

The `future`-package is an API for sequential and parallel-processing. The package implements sequential, multicore, multisession and cluster features. Expressions can be evaluated on the local machine, in a parallel set of local machines or distributed on a mix of local and remote machines. 

_"Future is an abstraction for a value that may be available at some point in the future."_ [(Bengtsson 2024)](https://github.com/futureverse/future)

Futures can be created implicitly or explicitly, they can be resolved or unresolved and there are different ways of resolving a future. The way of resolution can be defined by choosing a fitting backend/ package e.g. `sequential` resolves futures sequentially and in the current R process whereas `multisession`resolves futures parallely via a background R session on the current machine.  The backend needs to be specified by the user to optimize functionality though there are some defaults for all backends: 

- evaluation on local environment (unless defined otherwise),
- global variables are identified automatically, 
- future expressions are only evaluated once. 

### Synchronous futures

Synchronous futures are resolved one after another. The main process is blocked until the resolution is completed. **Sequential futures** are the default backend in the `future`-package. They operate similar to regular R evaluation. The future is resolved in the local environment in the moment it is created. 

### Asynchronous futures

Asynchronous futures are resolved in the background and do not cause blocking of other tasks/ operations. You can carry on like that until you request a result of a still unresolved future or try to start another future while all background workers are busy, then the process will be blocked. The cookie-analogy: You can start prepping the next batch of cookies while the first one bakes but when the ovens are full you will need to wait to bake it or taste the ones that are still in the oven. 
**Multisession futures** are evaluated in background R sessions launched by the package running on the same machine as the calling process. Further processes/ tasks are locked when all session are busy. You can define a number of background sessions with the availableCores() function otherwise all available cores will be used.
**Multicore futures** works with _forking_ i.e. splits worker from the main session, both working on the same task. This can reduce overhead due to shared memory thus when changes are made a copy for the worker on the main session is needed and generally multicore futures tend to be instable. 
**Cluster Futures** creates a cluster of workers i.e. a team that works on the same task at the same time. Cluster futures can be local  or remote, clusters that are not used anymore will be shut down automatically. 

### "Nested topology"

Nested futures can internally create another future, these futures are evaluated sequentially so that overload is avoided. Also the inner futures are set to sequential so one keeps control of further workers. With `plan()`you can change the mode of process to `multisession`, `multicore` and so on. For nested parallelism plans you can set multilevel plans: 

```{r}
plan(list(multisession, multisession))
```

When working with nested futures it is important to keep management of the workers. Nested futures can easily cause memory overload, delays and failed futures caused by a lack of available R sessions. 

...

## Why is information on performance important? 

Testing, documentation, and performance evaluation are critical throughout the development of an R package. These practices ensure reliability, maintainability, user trust, and a positive user experience. A well-designed package should produce correct and transparent results, function consistently across systems and R versions, and offer performance suitable for real-world applications. Clear documentation, intuitive interfaces, and informative error messages enhance usability and minimize the risk of misuse [(Wickham & Bryan 2023)](18  Other markdown files – R Packages (2e)). 

## How are we assessing performance? 

CRAN's standards for package submissions check for performance and correctness. CRAN has established a set of policies regarding quality, copyright, effectiveness and performance [(R Core Team)](https://cran.r-project.org/web/packages/policies.html). 


## Should I enable parallel processing?

`gxc` follows the parallel computing paradigm of the `future` package. By default, this is disabled and the data will be processed through a "standard" sequential pipeline. However, users can enable parallel processing in all major functions (`parallel = TRUE`). This can significantly increase execution time of processes which use large datasets. In our functions, parallel computing becomes especially relevant when observations are linked with EO data based on varying focal time periods. At the same time, setting up a parallel plan and chunk-based processing generates an overhead which could lead to performance decreases compared to sequential approaches. This is especially true for smaller datasets with narrower spatial extent and fewer observations. 

If `parallel=TRUE`, data processing is performed by pre-chunking input data. The chunk sizes can be varied with `chunk_size=`. The default is set to `50`. The plot below gives you an indication whether it makes sense to enable parallel computing. It compares 1. a "purely" sequential approach (`parallel=FALSE`) with 2. an enabled pre-chunking but no specified parallel plan (`parallel=TRUE` and `future::plan(sequential)`) and 3. an enabled pre-chunking and a parallel plan with six workers (`parallel=TRUE` and `future::plan(multisession, workers = 6)`). The specifications are:

1. **Sample size**: 10-10000 
2. **Spatial extent**: Germany 
3. **Focal period**: Averages for month, season, 6 months, and year
4. **Focal time**: Varying time points for each observation.

We are accessing the `2m_temperature` indicator from the `ERA5-Land` dataset for this exercise. The code was run on an average office laptop (Intel Core i7-10510U CPU, 16GB RAM, Windows 10).

<details>
 <summary>Replication code</summary>

```{r}
# Load required packages
library(tidyverse)
library(plotly)
library(scales) # for the alpha() function

# Read the performance results for parallel processing
results_df <- readr::read_rds("./data/performance_results_parallel.rds")

# Set factor levels for focal period and processing mode for consistent plotting
results_df <- results_df %>%
  mutate(
    focal_period = factor(focal_period, levels = c("Month", "Season", "6 Months", "Year")),
    mode = factor(mode, levels = c(
      "sequential",
      "parallel_sequential (cs=20)",
      "parallel_sequential (cs=50)",
      "parallel_sequential (cs=100)",
      "parallel_sequential (cs=200)",
      "parallel_multisession (cs=20)",
      "parallel_multisession (cs=50)",
      "parallel_multisession (cs=100)",
      "parallel_multisession (cs=200)"
    ))
  )

# Define custom colors for each processing mode
colors <- c(
  "#045a8d", # sequential
  rep("#ae017e", 4), # parallel_sequential
  rep("#006d2c", 4)  # parallel_multisession
)
colors <- colors[seq_along(levels(results_df$mode))]
names(colors) <- levels(results_df$mode)

# Define line dash types and alpha transparency for each mode
line_dash_types <- c(
  "solid",    # sequential
  "dash", "solid", "dash", "dash",      # parallel_sequential
  "dash", "solid", "dash", "dash"       # parallel_multisession
)
line_alphas <- c(
  1,         # sequential
  0.4, 1, 0.4, 0.4,    # parallel_sequential
  0.4, 1, 0.4, 0.4     # parallel_multisession
)

# Prepare lists for plotly traces and focal period tracking
focal_periods <- levels(results_df$focal_period)
modes <- levels(results_df$mode)

trace_list <- list()
trace_focal <- c()

# Loop through each focal period and mode to create traces for points and smoothed lines
for (fp in focal_periods) {
  for (i in seq_along(modes)) {
    m <- modes[i]
    d_sub <- filter(results_df, focal_period == fp, mode == m)
    if (nrow(d_sub) > 0) {
      # Add scatter points for each mode
      trace_list[[length(trace_list) + 1]] <- list(
        x = d_sub$sample_size,
        y = d_sub$seconds / 60, # Convert seconds to minutes
        type = "scatter",
        mode = "markers",
        name = m,
        marker = list(color = colors[m]),
        legendgroup = m,
        showlegend = TRUE
      )
      trace_focal <- c(trace_focal, fp)

      # Add smoothed line (loess) if enough data points are available
      if (nrow(d_sub) >= 3) {
        loess_fit <- loess((seconds / 60) ~ sample_size, data = d_sub)
        x_new <- sort(d_sub$sample_size)
        y_new <- predict(loess_fit, newdata = data.frame(sample_size = x_new))
      } else {
        x_new <- d_sub$sample_size
        y_new <- d_sub$seconds / 60
      }
      # Add the smoothed line trace
      trace_list[[length(trace_list) + 1]] <- list(
        x = x_new,
        y = y_new,
        type = "scatter",
        mode = "lines",
        name = m,
        line = list(color = alpha(colors[m], line_alphas[i]), dash = line_dash_types[i]),
        legendgroup = m,
        showlegend = FALSE
      )
      trace_focal <- c(trace_focal, fp)
    }
  }
}

# Optional: Add dummy traces for the legend (ensures all modes appear in the legend)
dummy_traces <- list()
for (m in modes) {
  dummy_traces[[length(dummy_traces) + 1]] <- list(
    x = NA, y = NA,
    type = "scatter", mode = "markers",
    name = m,
    marker = list(color = colors[m]),
    legendgroup = m,
    showlegend = TRUE,
    hoverinfo = "none"
  )
}

# Build the plotly object by adding all traces
#p_plotly <- plot_ly()
#for (tr in trace_list) {
#  p_plotly <- add_trace(p_plotly, !!!tr)
#}
#for (tr in dummy_traces) {
#  p_plotly <- add_trace(p_plotly, !!!tr)
#}

p_plotly <- plot_ly()
for (tr in trace_list) {
  p_plotly <- do.call(add_trace, c(list(p_plotly), tr))
}
for (tr in dummy_traces) {
  p_plotly <- do.call(add_trace, c(list(p_plotly), tr))
}

# Create dropdown menu buttons to filter by focal period
focal_period_buttons <- list()
for (fp in focal_periods) {
  visibility <- trace_focal == fp
  focal_period_buttons[[length(focal_period_buttons) + 1]] <- list(
    method = "restyle",
    args = list("visible", visibility),
    label = fp
  )
}

# Finalize plot layout with title, axis labels, and dropdown menu
p_plotly <- p_plotly %>%
  layout(
    title = "Execution Time vs Sample Size",
    margin = list(t = 150),
    xaxis = list(title = "Sample Size"),
    yaxis = list(title = "Execution Time (minutes)"),
    updatemenus = list(
      list(
        type = "dropdown",
        active = 0,
        buttons = focal_period_buttons,
        x = 0.1, y = 1.15,
        xanchor = "left", yanchor = "top"
      )
    ),
    annotations = list(
      list(
        x = 0.1, y = 1.25,
        xref = "paper", yref = "paper",
        text = "Focal period",
        showarrow = FALSE,
        font = list(size = 14)
      )
    )
  )

# Display the interactive plot
p_plotly
```
</details> 


```{r, echo=FALSE, warning=FALSE}
results_df <- read_rds("./data/performance_results_parallel.rds")

results_df <- results_df |>
  mutate(
    focal_period = factor(focal_period, levels = c("Month", "Season", "6 Months", "Year")),
    mode = factor(mode, levels = c(
      "sequential",
      "parallel_sequential (cs=20)",
      "parallel_sequential (cs=50)",
      "parallel_sequential (cs=100)",
      "parallel_sequential (cs=200)",
      "parallel_multisession (cs=20)",
      "parallel_multisession (cs=50)",
      "parallel_multisession (cs=100)",
      "parallel_multisession (cs=200)"
    ))
  )

focal_periods <- levels(results_df$focal_period)
modes <- sort(unique(results_df$mode))

# --- Custom Manual Color Scheme ---
# Manually specify colors for each mode. Adjust as needed.
colors <- c(
  "#045a8d",
  "#ae017e", "#ae017e", "#ae017e", "#ae017e",
  "#006d2c", "#006d2c", "#006d2c", "#006d2c"
)
colors <- colors[seq_along(modes)]
names(colors) <- modes

# --- Manual Line Settings ---
# Define the line dash type and alpha for each mode.
# (These vectors will be recycled if there are more modes than values.)
line_dash_types <- rep(c(
  "solid",
  "dash", "solid", "dash", "dash",
  "dash", "solid", "dash", "dash"
), length.out = length(modes))
line_alphas <- rep(c(
  1,
  0.4, 1, 0.4, 0.4,
  0.4, 1, 0.4, 0.4
), length.out = length(modes))

# --- Build Data Traces ---
# We create data traces for each combination of focal_period and mode.
# Each combination produces two traces: one for points and one for a smooth line.
trace_list <- list() # to hold data traces (which will be updated by the dropdown)
trace_focal <- c() # record the focal_period for each data trace

for (fp in focal_periods) {
  for (m in modes) {
    d_sub <- results_df %>% filter(focal_period == fp, mode == m)
    if (nrow(d_sub) > 0) {
      # --- Points Trace ---
      trace_points <- list(
        x = d_sub$sample_size,
        y = d_sub$seconds / 60,
        type = "scatter",
        mode = "markers",
        name = m, # legend label will be the mode
        marker = list(color = colors[m]),
        legendgroup = m,
        showlegend = TRUE # these traces are intended to show the legend
      )
      trace_list[[length(trace_list) + 1]] <- trace_points
      trace_focal <- c(trace_focal, as.character(fp))

      # --- Smooth Trace ---
      if (nrow(d_sub) >= 3) {
        loess_fit <- loess((seconds / 60) ~ sample_size, data = d_sub)
        x_new <- sort(d_sub$sample_size)
        y_new <- predict(loess_fit, newdata = data.frame(sample_size = x_new))
      } else {
        x_new <- d_sub$sample_size
        y_new <- d_sub$seconds / 60
      }
      # Match the mode index to get its corresponding line settings.
      i <- match(m, modes)
      # Adjust the line color to include alpha.
      line_color_with_alpha <- alpha(colors[m], line_alphas[i])

      trace_smooth <- list(
        x = x_new,
        y = y_new,
        type = "scatter",
        mode = "lines",
        name = m, # same mode name, but we hide its legend to merge with points.
        line = list(color = line_color_with_alpha, dash = line_dash_types[i]),
        legendgroup = m,
        showlegend = FALSE
      )
      trace_list[[length(trace_list) + 1]] <- trace_smooth
      trace_focal <- c(trace_focal, as.character(fp))
    }
  }
}

# --- Create Dummy Legend Traces ---
# These traces serve solely as legend entries (one per mode) and are not affected by the dropdown.
dummy_traces <- list()
for (m in modes) {
  dummy_traces[[length(dummy_traces) + 1]] <- list(
    x = NA,
    y = NA,
    type = "scatter",
    mode = "markers",
    name = m,
    marker = list(color = colors[m]),
    legendgroup = m,
    showlegend = TRUE,
    hoverinfo = "none"
  )
}

# --- Build the Plotly Object ---
p_plotly <- plot_ly()
# Add the data traces (which will be updated by the dropdown menu).
for (tr in trace_list) {
  p_plotly <- add_trace(p_plotly,
    x = tr$x,
    y = tr$y,
    type = tr$type,
    mode = tr$mode,
    name = tr$name,
    marker = tr$marker,
    line = tr$line,
    legendgroup = tr$legendgroup,
    showlegend = tr$showlegend
  )
}
# Add the dummy legend traces (these remain always visible).
for (tr in dummy_traces) {
  p_plotly <- add_trace(p_plotly,
    x = tr$x,
    y = tr$y,
    type = tr$type,
    mode = tr$mode,
    name = tr$name,
    marker = tr$marker,
    legendgroup = tr$legendgroup,
    showlegend = tr$showlegend,
    hoverinfo = tr$hoverinfo
  )
}

# --- Create the Update Menu for focal_period ---
# Each button shows only the data traces that belong to a given focal_period.
focal_period_buttons <- list()
for (fp in focal_periods) {
  visibility <- sapply(trace_focal, function(x) x == fp)
  focal_period_buttons[[length(focal_period_buttons) + 1]] <- list(
    method = "restyle",
    args = list("visible", visibility),
    label = fp,
    traces = seq_len(length(trace_list)) # update only the data traces
  )
}

# --- Add Update Menu and Layout ---
p_plotly <- p_plotly %>% layout(
  title = "Execution Time vs Sample Size",
  y = 0.85,
  margin = list(t = 150), # Increase top margin to 150 (adjust as needed)
  xaxis = list(title = "Sample Size"),
  yaxis = list(title = "Execution Time (minutes)"),
  updatemenus = list(
    list(
      type = "dropdown",
      active = 0,
      buttons = focal_period_buttons,
      x = 0.1, # left-align the dropdown
      y = 1.15,
      xanchor = "left", # ensures left alignment
      yanchor = "top"
    )
  ),
  annotations = list(
    list(
      x = 0.1,
      y = 1.25,
      xref = "paper",
      yref = "paper",
      text = "Focal period",
      showarrow = FALSE,
      font = list(size = 14)
    )
  )
)

p_plotly
```


<details>
 <summary>Literature</summary>
 
R Core Team. (n.d.). CRAN repository policy. The Comprehensive R Archive Network (CRAN). https://cran.r-project.org/web/packages/policies.html
 
Wickham, H., & Bryan, J. (2023). 18 Other markdown files. In R Packages (2nd ed.). https://r-pkgs.org/other-markdown.html


</details>